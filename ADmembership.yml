---
- name: Manage AD users and group memberships
  hosts: all
  gather_facts: no
  vars:
    source_param: "SSSS"
    task_param: "TTTT"
    default_password: "B@nk0fC@N890"
    
  tasks:
    - name: Define accounts
      set_fact:
        accounts:
          - "{{ task_param }}"
          - "{{ task_param }}_a"
          - "{{ task_param }}_ca"
          - "{{ task_param }}_da"
        source_accounts:
          - "{{ source_param }}"
          - "{{ source_param }}_a"
          - "{{ source_param }}_ca"
          - "{{ source_param }}_da"
    
    - name: Check if source_param accounts exist and retrieve their OU
      win_shell: |
        Get-ADUser -Identity "{{ item }}" | Select-Object -ExpandProperty DistinguishedName
      register: source_account_info
      ignore_errors: yes
      loop: "{{ source_accounts }}"
    
    - name: Log non-existent source accounts
      debug:
        msg: "Source account {{ item.item }} does not exist."
      when: item.rc != 0
      loop: "{{ source_account_info.results }}"

    - name: Set fact for existing source_param accounts and their OUs
      set_fact:
        existing_accounts: "{{ existing_accounts | default({}) | combine({item.item: item.stdout | regex_search('OU=.*?,DC=.*$')}) }}"
      when: item.rc == 0
      loop: "{{ source_account_info.results }}"
    
    - name: Create task_param accounts in the same OU as the source_param accounts using PowerShell
      win_shell: |
        New-ADUser -Name "{{ item.key }}" -UserPrincipalName "{{ item.key }}@domain.com" -SamAccountName "{{ item.key }}" -Path "{{ item.value }}" -AccountPassword (ConvertTo-SecureString "{{ default_password }}" -AsPlainText -Force) -Enabled $true
      when: item.value is defined
      loop: "{{ existing_accounts | dict2items }}"

    - name: Ensure task_param accounts are in the same AD groups as source_param accounts
      win_group_membership:
        name: "{{ item.key }}"
        members: "{{ lookup('win_group_membership', source_account_groups[item.key]) }}"
        state: present
      when: item.value is defined
      loop: "{{ existing_accounts | dict2items }}"

    - name: Retrieve AD groups of source accounts
      win_group_membership:
        name: "{{ item }}"
        get_members: yes
      loop: "{{ source_accounts }}"
      register: source_account_groups
