-- hosts: all
   tasks:

    - name: Get disk facts 
      win_shell: |
        Get-WmiObject Win32_LogicalDisk | Select-Object DeviceID, @{Name="Size(GB)";Expression={[math]::round($_.Size / 1GB, 2)}}, 
        @{Name="FreeSpace(GB)";Expression={[math]::round($_.FreeSpace / 1GB, 2)}}

    - name: Check disk usage
      win_shell: |
        $threshold = 20
        $disks = Get-WmiObject Win32_LogicalDisk | Where-Object {$_.DriveType -eq "3"}  
        $results = @()
        foreach($disk in $disks) {
          $percent = [int](($disk.Size - $disk.Freespace) / $disk.Size * 100)
          if ($percent -ge $threshold) {
            $props = @{
              Device = $disk.DeviceID   
              UsedPercent = $percent
            }
            $results += New-Object -TypeName PSObject -Property $props
          }
        }
        $results | Format-Table Device,UsedPercent -AutoSize
      register: disk_usage

    - name: Display disk usage  
      debug:
        var: disk_usage.stdout_lines
    
    - name: Get largest files
      win_shell: |
        $threshold = 20
        $count = 15
        $results = @() 
        Get-WmiObject Win32_LogicalDisk | ForEach-Object {  
          $deviceId = $_.DeviceID
          $percent = [int](($_.Size - $_.Freespace) / $_.Size * 100)  
          if ($percent -ge $threshold) {
            $largeFiles = Get-ChildItem -Path $deviceId -Recurse -File | Sort-Object -Property Length -Descending | Select-Object -First $count FullName,Length,LastWriteTime
            $results += $largeFiles  
          }
        }
        $results | Out-File -FilePath C:\largest_files.txt 
    - name: Display largest files  
      win_shell: Get-Content -Path C:\largest_files.txt