
‚∏ª

‚úÖ Part 1: Removing a Node from the Cluster

‚ö†Ô∏è Pre-checks before removing a node:

	‚Ä¢	Ensure the node has no active cluster roles (move them to another node).
	‚Ä¢	Ensure quorum will not be lost if the node is removed.
	‚Ä¢	Validate cluster health before making changes.

Step-by-step:
	1.	Open Failover Cluster Manager (FCM)
	‚Ä¢	On any node, open Failover Cluster Manager.
	2.	Connect to Cluster (if not already connected)
	‚Ä¢	Right-click on Failover Cluster Manager, choose ‚ÄúConnect to Cluster‚Äù, and select your cluster name.
	3.	Drain Roles (if any are running on the node)
	‚Ä¢	Expand the cluster name ‚Üí go to Nodes
	‚Ä¢	Right-click on the node to remove ‚Üí ‚ÄúPause‚Äù > ‚ÄúDrain Roles‚Äù
	‚Ä¢	Wait for all roles to move.
	4.	Pause and Evict the Node
	‚Ä¢	Right-click on the node again ‚Üí ‚ÄúMore Actions‚Äù > ‚ÄúEvict‚Äù
	‚Ä¢	Confirm the eviction.
	5.	Verify Node Removal
	‚Ä¢	The node should disappear from the Nodes section.
	‚Ä¢	Review cluster events and validation to ensure no issues occurred.

‚∏ª

‚úÖ Part 2: Adding the Node Back to the Cluster

‚ö†Ô∏è Pre-checks before adding a node:

	‚Ä¢	Ensure the node has:
	‚Ä¢	Same Windows Server OS version and patch level.
	‚Ä¢	Cluster feature installed (Failover-Clustering feature).
	‚Ä¢	Proper DNS resolution and firewall settings.
	‚Ä¢	All necessary storage/network access.
	‚Ä¢	Optional but recommended: Run ‚ÄúValidate Cluster‚Äù before adding.

Step-by-step:
	1.	Install Failover Clustering Feature (if not installed)
On the node:

Install-WindowsFeature -Name Failover-Clustering -IncludeManagementTools -Restart

	2.	Open Failover Cluster Manager
	‚Ä¢	On any node that‚Äôs already part of the cluster.
	3.	Connect to the Cluster (if not already)
	‚Ä¢	Right-click Failover Cluster Manager, choose ‚ÄúConnect to Cluster‚Äù, select your cluster.
	4.	Add Node to Cluster
	‚Ä¢	Right-click Nodes ‚Üí ‚ÄúAdd Node‚Äù
	‚Ä¢	Type the hostname of the node you want to add.
	5.	Validation Wizard (Recommended)
	‚Ä¢	It will prompt you to run cluster validation.
	‚Ä¢	Choose Yes and run ‚ÄúRun only tests I select‚Äù or ‚ÄúRun all tests‚Äù for thorough validation.
	6.	Complete the Wizard
	‚Ä¢	Once validation passes, follow the prompts to add the node.
	7.	Verify Node Addition
	‚Ä¢	Ensure the node appears under Nodes.
	‚Ä¢	Verify it shows as Up and Running.
	‚Ä¢	Optionally Resume the node if it‚Äôs paused.
	8.	Test Cluster Role Failover (optional but recommended)
	‚Ä¢	Move a role to the newly added node to verify its functionality.

üõ°Ô∏è Post Steps & Best Practices
	‚Ä¢	Monitor Event Viewer for cluster-related logs.
	‚Ä¢	Monitor Failover Cluster Manager for health.
	‚Ä¢	Consider resuming cluster-aware backups/monitoring/patching tools on the added node.

‚úÖ Steps to Drain a Node (Without Eviction)

1. Open Failover Cluster Manager
	‚Ä¢	Open Failover Cluster Manager on any cluster node or your management workstation.
	‚Ä¢	Connect to the relevant cluster if not already connected.

2. Navigate to Nodes
	‚Ä¢	Expand the cluster name ‚Üí Click on Nodes.

3. Pause and Drain the Node
	‚Ä¢	Right-click the node you want to drain.
	‚Ä¢	Select:
‚ÄúPause‚Äù > ‚ÄúDrain Roles‚Äù

This action will:
	‚Ä¢	Move all cluster roles (VMs, file shares, SQL instances, etc.) to other nodes.
	‚Ä¢	Mark the node as Paused, so it won‚Äôt receive new workloads until resumed.

4. Verify Roles Were Moved
	‚Ä¢	Go to Roles in the left pane.
	‚Ä¢	Check that all roles are now running on other nodes.

5. (Optional) Perform Maintenance
	‚Ä¢	You can now safely:
	‚Ä¢	Patch the node.
	‚Ä¢	Reboot it.
	‚Ä¢	Perform updates or diagnostics.

‚úÖ Resuming the Node After Maintenance

Once you‚Äôre done:

6. Resume the Node
	‚Ä¢	Go back to Nodes, right-click the paused node.
	‚Ä¢	Choose:
‚ÄúResume‚Äù > ‚ÄúDo Not Fail Roles Back‚Äù (recommended to avoid unnecessary failovers)
OR
‚ÄúResume‚Äù > ‚ÄúFail Roles Back‚Äù (if you want the roles to return to the original node).

‚úÖ Steps to Set Node Priority (Preferred Owners) Using Failover Cluster Manager

1. Open Failover Cluster Manager
	‚Ä¢	Open Failover Cluster Manager.
	‚Ä¢	Connect to your cluster if not already connected.

2. Navigate to Roles
	‚Ä¢	In the left pane, expand your cluster and click on Roles.
	‚Ä¢	You‚Äôll see the list of clustered roles (VMs, file servers, SQL instances, etc.).

3. Right-click the Role You Want to Prioritize
	‚Ä¢	Select Properties.

4. Go to the ‚ÄòPreferred Owners‚Äô Tab
	‚Ä¢	In the Properties window, go to the ‚ÄúPreferred Owners‚Äù tab.

5. Set Node Priority
	‚Ä¢	You‚Äôll see a list of all cluster nodes.
	‚Ä¢	Check the boxes next to nodes you want to allow as preferred owners.
	‚Ä¢	Reorder them using Move Up / Move Down ‚Äî the node at the top will have the highest priority.
‚ö†Ô∏è If a role fails, the cluster will try nodes in this order.

6. Apply the Changes
	‚Ä¢	Click OK or Apply to confirm.

‚úÖ PowerShell to Drain a Cluster Node
Suspend-ClusterNode -Name "NodeName" -Drain

This will:
	‚Ä¢	Pause the node (ClusterNode01) in the cluster.
	‚Ä¢	Live migrate all roles (e.g., clustered VMs, SQL instances, etc.) to other nodes.
	‚Ä¢	Prevent any new roles from being moved to that node.

üß† Check Node Status After Drain
Get-ClusterNode -Name "ClusterNode01" | Format-List Name, State, NodeWeight

‚úÖ PowerShell to Resume the Node (After Maintenance)
Resume-ClusterNode -Name "ClusterNode01" -Failback None

Use -Failback None to resume the node without moving roles back (recommended).
Use -Failback Immediate if you want roles to return to that node 



Get-WinEvent -LogName System -FilterHashtable @{Id=1074} -MaxEvents 1 | 
Select-Object TimeCreated,
              @{Name='User'; Expression={$_.Properties[6].Value}},
              @{Name='Process'; Expression={$_.Properties[0].Value}},
              @{Name='Reason'; Expression={$_.Properties[2].Value}},
              @{Name='Comment'; Expression={$_.Properties[5].Value}}




---
- name: Drain a Windows Failover Cluster node and display cluster info
  hosts: windows_cluster_nodes
  gather_facts: no
  tasks:

    - name: Drain the cluster node (pause with drain)
      ansible.windows.win_shell: |
        Suspend-ClusterNode -Drain
      register: drain_result

    - name: Display output from draining node
      debug:
        var: drain_result.stdout

    - name: Get cluster name
      ansible.windows.win_shell: |
        (Get-Cluster).Name
      register: cluster_name

    - name: Display cluster name
      debug:
        msg: "Cluster Name: {{ cluster_name.stdout }}"

    - name: Get clustered roles and their current owner nodes
      ansible.windows.win_shell: |
        Get-ClusterGroup | Select-Object Name, OwnerNode | ConvertTo-Json -Compress
      register: cluster_roles

    - name: Display clustered roles and owner nodes
      set_fact:
        cluster_roles_info: "{{ cluster_roles.stdout | from_json }}"

    - name: Print role ownership
      debug:
        msg: "Role '{{ item.Name }}' is owned by node '{{ item.OwnerNode }}'"
      loop: "{{ cluster_roles_info }}"


