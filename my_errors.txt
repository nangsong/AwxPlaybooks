---
- name: Windows Server Compliance Check
  hosts: windows
  gather_facts: no
  vars:
    compliance_days: 15
    max_uptime_days: 6
    smtp_server: "smtp.example.com"
    smtp_port: 587
    smtp_username: "your_email@example.com"
    smtp_password: "your_password"
    email_from: "your_email@example.com"
    email_to: "recipient@example.com"
    email_subject: "Non-Compliant Windows Servers Report"

  tasks:
    - name: Get the latest security update installation date
      win_shell: |
        $latestUpdate = Get-HotFix | Where-Object { $_.Description -match "Security Update" } | Sort-Object InstalledOn -Descending | Select-Object -First 1
        if ($latestUpdate) {
            $latestUpdate.InstalledOn.ToString("yyyy-MM-dd")
        } else {
            "1970-01-01"
        }
      register: latest_update_date

    - name: Get server uptime in days
      win_shell: |
        $os = Get-WmiObject -Class Win32_OperatingSystem
        $bootTime = [datetime]::ParseExact($os.LastBootUpTime.Split('.')[0], 'yyyyMMddHHmmss', $null)
        $uptime = (Get-Date) - $bootTime
        [math]::Round($uptime.TotalDays, 2)
      register: server_uptime

    - name: Calculate the cutoff date for compliance
      set_fact:
        cutoff_date: "{{ (ansible_date_time.iso8601 | regex_replace('T.*', '') | to_datetime('%Y-%m-%d') - (compliance_days * 86400) | strftime('%Y-%m-%d') }}"

    - name: Determine compliance and build non-compliant servers list
      set_fact:
        non_compliant_servers: >-
          {{
            non_compliant_servers | default([]) + [{
              'server_name': inventory_hostname,
              'reason': []
            }]
          }}
      when: >
        (latest_update_date.stdout | regex_replace('\r\n$', '')) < cutoff_date or
        (server_uptime.stdout | float) > max_uptime_days

    - name: Add reason for non-compliance (no patch received)
      set_fact:
        non_compliant_servers: >-
          {{
            non_compliant_servers | map('combine', {
              'reason': item.reason + ['no patch received']
            }) | list
          }}
      when: >
        (latest_update_date.stdout | regex_replace('\r\n$', '')) < cutoff_date
      loop: "{{ non_compliant_servers }}"

    - name: Add reason for non-compliance (server was not rebooted)
      set_fact:
        non_compliant_servers: >-
          {{
            non_compliant_servers | map('combine', {
              'reason': item.reason + ['server was not rebooted']
            }) | list
          }}
      when: >
        (server_uptime.stdout | float) > max_uptime_days
      loop: "{{ non_compliant_servers }}"

    - name: Generate report in tabular format
      set_fact:
        report_table: |
          Server Name | Reason
          ----------- | ------
          {% for server in non_compliant_servers %}
          {{ server.server_name }} | {{ server.reason | join(', ') }}
          {% endfor %}

    - name: Send email report
      mail:
        host: "{{ smtp_server }}"
        port: "{{ smtp_port }}"
        username: "{{ smtp_username }}"
        password: "{{ smtp_password }}"
        from: "{{ email_from }}"
        to: "{{ email_to }}"
        subject: "{{ email_subject }}"
        body: "{{ report_table }}"
      when: non_compliant_servers is defined and non_compliant_servers | length > 0