---
- name: Windows Server Compliance Check
  hosts: windows_servers
  gather_facts: no
  vars:
    compliance_days: 15
    max_uptime_days: 6
    smtp_server: "smtp.example.com"
    smtp_port: 587
    smtp_username: "your_email@example.com"
    smtp_password: "your_password"
    email_from: "your_email@example.com"
    email_to: "recipient@example.com"
    email_subject: "Non-Compliant Windows Servers Report"

  tasks:
    - name: Get last security update installation date
      community.windows.win_updates:
        category_names: SecurityUpdates
        state: searched
      register: win_updates_result

    - name: Get server uptime using PowerShell
      community.windows.win_shell: |
        (Get-Date) - (Get-CimInstance -ClassName Win32_OperatingSystem).LastBootUpTime
      register: uptime_result

    - name: Parse uptime result
      set_fact:
        uptime_days: "{{ (uptime_result.stdout | regex_search('(\\d+)\\.\\d{2}:\\d{2}:\\d{2}') | int) }}"

    - name: Calculate compliance status
      set_fact:
        compliance_status: >-
          {{
            {
              'server_name': inventory_hostname,
              'last_patch_date': win_updates_result.updates | selectattr('installed', 'equalto', true) | map(attribute='installed_date') | sort | last | default('N/A'),
              'uptime_days': uptime_days,
              'is_compliant': (
                (win_updates_result.updates | selectattr('installed', 'equalto', true) | map(attribute='installed_date') | sort | last | default('N/A') | to_datetime | date_diff(now(), 'days') <= compliance_days
              ) and (
                uptime_days <= max_uptime_days
              ),
              'reason': []
            }
          }}

    - name: Add reason for non-compliance (no patch received)
      set_fact:
        compliance_status: >-
          {{
            compliance_status | combine({
              'reason': compliance_status.reason + ['no patch received']
            }) if (
              (win_updates_result.updates | selectattr('installed', 'equalto', true) | map(attribute='installed_date') | sort | last | default('N/A') | to_datetime | date_diff(now(), 'days') > compliance_days
            ) else compliance_status
          }}

    - name: Add reason for non-compliance (server was not rebooted)
      set_fact:
        compliance_status: >-
          {{
            compliance_status | combine({
              'reason': compliance_status.reason + ['server was not rebooted']
            }) if (
              uptime_days > max_uptime_days
            ) else compliance_status
          }}

    - name: Collect non-compliant servers
      set_fact:
        non_compliant_servers: >-
          {{
            (non_compliant_servers | default([])) + [compliance_status]
            if not compliance_status.is_compliant
            else non_compliant_servers | default([])
          }}

  post_tasks:
    - name: Generate non-compliant servers report
      set_fact:
        report_table: >-
          {{
            non_compliant_servers | map(attribute='server_name') | list | zip(
              non_compliant_servers | map(attribute='reason') | list
            ) | map('join', ', ') | list | join('\n')
          }}

    - name: Send email with non-compliant servers report
      community.general.mail:
        host: "{{ smtp_server }}"
        port: "{{ smtp_port }}"
        username: "{{ smtp_username }}"
        password: "{{ smtp_password }}"
        from: "{{ email_from }}"
        to: "{{ email_to }}"
        subject: "{{ email_subject }}"
        body: |
          Non-Compliant Servers Report:
          =============================
          Server Name | Reason
          ----------- | ------
          {{ report_table }}
      when: non_compliant_servers is defined and non_compliant_servers | length > 0
